import { canonicalize } from './ops';
import { retessellate } from './retessellate';
import test from 'ava';

// A box with triangles on each edge.
const center = [[-5, -5, 0], [5, -5, 0], [5, 5, 0], [-5, 5, 0]];
const right = [[5, -5, 0], [8, 0, 0], [5, 5, 0]];
const left = [[-5, 5, 0], [-8, 0, 0], [-5, -5, 0]];
const top = [[-5, 5, 0], [5, 5, 0], [0, 8, 0]];
const bottom = [[5, -5, 0], [-5, -5, 0], [0, -8, 0]];

test('all together', (t) => {
  const r = retessellate([center, right, left, top, bottom]);
  t.deepEqual(r, [[[5, -5], [8, 0], [5, 5], [0, 8], [-5, 5], [-8, 0], [-5, -5], [0, -8]]]);
});

test('left and right', (t) => {
  const r = retessellate([right, left]);
  t.deepEqual(r, [[[-5, 5], [-8, 0], [-5, -5]], [[8, 0], [5, 5], [5, -5]]]);
});

test('top and right', (t) => {
  const r = retessellate([top, left]);
  t.deepEqual(r, [[[-5, 5], [-8, 0], [-5, -5]], [[5, 5], [0, 8], [-5, 5]]]);
});

test('overlapping', t => {
  const a = [[0, -5, 0], [10, -5, 0], [10, 5, 0], [0, 5, 0]];
  const b = [[0, -5, 0], [10, -5, 0], [10, 5, 0], [0, 5, 0]];
  const r = retessellate([a, b]);
  // This is producing duplicates
  t.deepEqual(r, [[[10, -5], [10, 5], [0, 5], [0, -5]], [[10, -5], [10, 5], [0, 5], [0, -5]]]);
});

test('random 1', t => {
  const a = [[0.72118, 0.4087, 0.34302], [0.98844, 0.64071, 0.77761], [0.57097, 0.24886, 0.01525]];
  const b = [[0.47176, 0.87948, 0.85681], [0.3662, 0.76788, 0.78425], [0.23678, 0.20951, 0.06022]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.72118, 0.4087, 0], [0.74126, 0.4087, 0], [0.57097, 0.24886, 0]], [[0.72118, 0.4087, 0], [0.98844, 0.64071, 0], [0.74126, 0.4087, 0]], [[0.47176, 0.87948, 0], [0.3662, 0.76788, 0], [0.23678, 0.20951, 0]]]);
});
test('random 2', t => {
  const a = [[0.57267, 0.03132, 0.0461], [0.0012, 0.47972, 0.87632], [0.71066, 0.23665, 0.49846]];
  const b = [[0.95171, 0.19892, 0.06535], [0.95953, 0.13881, 0.41814], [0.75974, 0.41039, 0.93951]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.91531, 0.19892, 0], [0.95171, 0.19892, 0], [0.95953, 0.13881, 0]], [[0.31098, 0.23665, 0], [0.71066, 0.23665, 0], [0.57267, 0.03132, 0]], [[0.91531, 0.19892, 0], [0.75974, 0.41039, 0], [0.95171, 0.19892, 0]], [[0.31098, 0.23665, 0], [0.0012, 0.47972, 0], [0.71066, 0.23665, 0]]]);
});
test('random 3', t => {
  const a = [[0.8946, 0.92435, 0.0628], [0.71084, 0.06059, 0.05766], [0.01275, 0.87095, 0.84623]];
  const b = [[0.53032, 0.31566, 0.77356], [0.14421, 0.2538, 0.62437], [0.1887, 0.1793, 0.8346]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.53032, 0.31566, 0], [0.14421, 0.2538, 0], [0.1887, 0.1793, 0]], [[0.01275, 0.87095, 0], [0.88324, 0.87095, 0], [0.71084, 0.06059, 0]], [[0.01275, 0.87095, 0], [0.8946, 0.92435, 0], [0.88324, 0.87095, 0]]]);
});
test('random 4', t => {
  const a = [[0.64212, 0.96258, 0.39607], [0.87976, 0.06919, 0.45726], [0.75263, 0.9352, 0.46037]];
  const b = [[0.80727, 0.32711, 0.03814], [0.63968, 0.6159, 0.54514], [0.59104, 0.0265, 0.2468]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.80727, 0.32711, 0], [0.63968, 0.6159, 0], [0.59104, 0.0265, 0]], [[0.75263, 0.9352, 0], [0.64212, 0.96258, 0], [0.87976, 0.06919, 0]]]);
});
test('random 5', t => {
  const a = [[0.89463, 0.33973, 0.63602], [0.0138, 0.36018, 0.92964], [0.93482, 0.39063, 0.12613]];
  const b = [[0.4125, 0.84197, 0.06057], [0.97359, 0.52954, 0.2044], [0.69211, 0.49037, 0.50458]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.0138, 0.36018, 0], [0.91078, 0.36018, 0], [0.89463, 0.33973, 0]], [[0.0138, 0.36018, 0], [0.93482, 0.39063, 0], [0.91078, 0.36018, 0]], [[0.66096, 0.52954, 0], [0.97359, 0.52954, 0], [0.69211, 0.49037, 0]], [[0.66096, 0.52954, 0], [0.4125, 0.84197, 0], [0.97359, 0.52954, 0]]]);
});
test('random 6', t => {
  const a = [[0.19432, 0.59568, 0.31385], [0.51963, 0.16625, 0.65189], [0.37888, 0.29129, 0.80282]];
  const b = [[0.90006, 0.99982, 0.35225], [0.62591, 0.43636, 0.06643], [0.09221, 0.58648, 0.87075]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.37888, 0.29129, 0], [0.42491, 0.29129, 0], [0.51963, 0.16625, 0]], [[0.09221, 0.58648, 0], [0.69895, 0.58648, 0], [0.62591, 0.43636, 0]], [[0.37888, 0.29129, 0], [0.19432, 0.59568, 0], [0.42491, 0.29129, 0]], [[0.09221, 0.58648, 0], [0.90006, 0.99982, 0], [0.69895, 0.58648, 0]]]);
});
test('random 7', t => {
  const a = [[0.07088, 0.47429, 0.91267], [0.58858, 0.56157, 0.67934], [0.0288, 0.90179, 0.05899]];
  const b = [[0.31979, 0.13025, 0.41733], [0.33163, 0.6554, 0.81271], [0.42301, 0.61672, 0.28567]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.33076, 0.61672, 0], [0.42301, 0.61672, 0], [0.31979, 0.13025, 0]], [[0.33076, 0.61672, 0], [0.33163, 0.6554, 0], [0.42301, 0.61672, 0]], [[0.58858, 0.56157, 0], [0.0288, 0.90179, 0], [0.07088, 0.47429, 0]]]);
});
test('random 8', t => {
  const a = [[0.83116, 0.53955, 0.72697], [0.62004, 0.41148, 0.99904], [0.85266, 0.22428, 0.32798]];
  const b = [[0.55331, 0.84994, 0.87837], [0.50155, 0.97867, 0.0319], [0.19528, 0.04564, 0.69212]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.83116, 0.53955, 0], [0.62004, 0.41148, 0], [0.85266, 0.22428, 0]], [[0.55331, 0.84994, 0], [0.50155, 0.97867, 0], [0.19528, 0.04564, 0]]]);
});
test('random 9', t => {
  const a = [[0.15816, 0.80228, 0.72129], [0.56191, 0.5668, 0.70211], [0.78421, 0.73513, 0.64337]];
  const b = [[0.06951, 0.92045, 0.95263], [0.83136, 0.81473, 0.41161], [0.64332, 0.08697, 0.34644]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.78421, 0.73513, 0], [0.15816, 0.80228, 0], [0.56191, 0.5668, 0]], [[0.14229, 0.81473, 0], [0.83136, 0.81473, 0], [0.64332, 0.08697, 0]], [[0.14229, 0.81473, 0], [0.06951, 0.92045, 0], [0.83136, 0.81473, 0]]]);
});
test('random 10', t => {
  const a = [[0.77344, 0.90045, 0.49552], [0.79358, 0.90425, 0.37309], [0.75254, 0.12108, 0.73558]];
  const b = [[0.79533, 0.44775, 0.85396], [0.59785, 0.48088, 0.41568], [0.56317, 0.7753, 0.99164]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.59785, 0.48088, 0], [0.77185, 0.48088, 0], [0.79533, 0.44775, 0]], [[0.59785, 0.48088, 0], [0.56317, 0.7753, 0], [0.77185, 0.48088, 0]], [[0.77344, 0.90045, 0], [0.79338, 0.90045, 0], [0.75254, 0.12108, 0]], [[0.77344, 0.90045, 0], [0.79358, 0.90425, 0], [0.79338, 0.90045, 0]]]);
});
test('random 11', t => {
  const a = [[0.26877, 0.20924, 0.31094], [0.93126, 0.99865, 0.57574], [0.48425, 0.77608, 0.58959]];
  const b = [[0.12376, 0.1163, 0.3583], [0.37994, 0.15295, 0.80174], [0.09272, 0.26232, 0.73622]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.37994, 0.15295, 0], [0.09272, 0.26232, 0], [0.12376, 0.1163, 0]], [[0.93126, 0.99865, 0], [0.48425, 0.77608, 0], [0.26877, 0.20924, 0]]]);
});
test('random 12', t => {
  const a = [[0.32245, 0.5027, 0.80517], [0.53766, 0.52353, 0.67235], [0.47371, 0.63389, 0.5804]];
  const b = [[0.31109, 0.54793, 0.3877], [0.8413, 0.88358, 0.48173], [0.96494, 0.93296, 0.35158]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.53766, 0.52353, 0], [0.47371, 0.63389, 0], [0.32245, 0.5027, 0]], [[0.8413, 0.88358, 0], [0.88108, 0.88358, 0], [0.31109, 0.54793, 0]], [[0.8413, 0.88358, 0], [0.96494, 0.93296, 0], [0.88108, 0.88358, 0]]]);
});
test('random 13', t => {
  const a = [[0.07406, 0.57316, 0.79255], [0.476, 0.25704, 0.65351], [0.6035, 0.72571, 0.2832]];
  const b = [[0.94153, 0.88969, 0.76876], [0.37343, 0.46367, 0.7205], [0.88693, 0.89941, 0.43405]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.6035, 0.72571, 0], [0.07406, 0.57316, 0], [0.476, 0.25704, 0]], [[0.87548, 0.88969, 0], [0.94153, 0.88969, 0], [0.37343, 0.46367, 0]], [[0.87548, 0.88969, 0], [0.88693, 0.89941, 0], [0.94153, 0.88969, 0]]]);
});
test('random 14', t => {
  const a = [[0.11701, 0.15109, 0.61775], [0.75799, 0.50802, 0.24057], [0.76891, 0.08105, 0.97733]];
  const b = [[0.44387, 0.39391, 0.31198], [0.07402, 0.65136, 0.98248], [0.76829, 0.59975, 0.00854]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.11701, 0.15109, 0], [0.76712, 0.15109, 0], [0.76891, 0.08105, 0]], [[0.11701, 0.15109, 0], [0.75799, 0.50802, 0], [0.76712, 0.15109, 0]], [[0.14816, 0.59975, 0], [0.76829, 0.59975, 0], [0.44387, 0.39391, 0]], [[0.14816, 0.59975, 0], [0.07402, 0.65136, 0], [0.76829, 0.59975, 0]]]);
});
test('random 15', t => {
  const a = [[0.51711, 0.06235, 0.76672], [0.93856, 0.78299, 0.04554], [0.74073, 0.74093, 0.81408]];
  const b = [[0.1043, 0.09572, 0.05293], [0.51677, 0.41785, 0.57629], [0.48145, 0.30104, 0.43666]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.3672, 0.30104, 0], [0.48145, 0.30104, 0], [0.1043, 0.09572, 0]], [[0.3672, 0.30104, 0], [0.51677, 0.41785, 0], [0.48145, 0.30104, 0]], [[0.93856, 0.78299, 0], [0.74073, 0.74093, 0], [0.51711, 0.06235, 0]]]);
});
test('random 16', t => {
  const a = [[0.01659, 0.059, 0.45584], [0.96047, 0.47483, 0.99376], [0.63194, 0.95182, 0.06544]];
  const b = [[0.35923, 0.24086, 0.7916], [0.77225, 0.68684, 0.02855], [0.39386, 0.82743, 0.47502]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.77225, 0.68684, 0], [0.39386, 0.82743, 0], [0.35923, 0.24086, 0]], [[0.96047, 0.47483, 0], [0.63194, 0.95182, 0], [0.01659, 0.059, 0]]]);
});
test('random 17', t => {
  const a = [[0.04195, 0.62995, 0.90627], [0.84713, 0.96584, 0.68382], [0.9369, 0.04546, 0.47622]];
  const b = [[0.69827, 0.24525, 0.25842], [0.19018, 0.61708, 0.43496], [0.71624, 0.02188, 0.46759]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.69827, 0.24525, 0], [0.19018, 0.61708, 0], [0.71624, 0.02188, 0]], [[0.04195, 0.62995, 0], [0.87989, 0.62995, 0], [0.9369, 0.04546, 0]], [[0.04195, 0.62995, 0], [0.84713, 0.96584, 0], [0.87989, 0.62995, 0]]]);
});
test('random 18', t => {
  const a = [[0.2994, 0.54086, 0.01681], [0.25896, 0.28054, 0.53455], [0.06156, 0.76994, 0.90678]];
  const b = [[0.40257, 0.68899, 0.0565], [0.76241, 0.58003, 0.52816], [0.7108, 0.79673, 0.84029]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.15396, 0.54086, 0], [0.2994, 0.54086, 0], [0.25896, 0.28054, 0]], [[0.15396, 0.54086, 0], [0.06156, 0.76994, 0], [0.2994, 0.54086, 0]], [[0.7108, 0.79673, 0], [0.40257, 0.68899, 0], [0.76241, 0.58003, 0]]]);
});
test('random 19', t => {
  const a = [[0.59423, 0.03192, 0.4258], [0.2759, 0.39134, 0.45175], [0.71629, 0.10156, 0.15122]];
  const b = [[0.02977, 0.60247, 0.32717], [0.16829, 0.49214, 0.26021], [0.37737, 0.69083, 0.27632]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.53255, 0.10156, 0], [0.71629, 0.10156, 0], [0.59423, 0.03192, 0]], [[0.53255, 0.10156, 0], [0.2759, 0.39134, 0], [0.71629, 0.10156, 0]], [[0.37737, 0.69083, 0], [0.02977, 0.60247, 0], [0.16829, 0.49214, 0]]]);
});
test('random 20', t => {
  const a = [[0.94537, 0.9038, 0.42332], [0.2296, 0.45479, 0.69747], [0.18138, 0.65448, 0.91113]];
  const b = [[0.59647, 0.52283, 0.59633], [0.14787, 0.95747, 0.9246], [0.14312, 0.21265, 0.30008]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.18138, 0.65448, 0], [0.54793, 0.65448, 0], [0.2296, 0.45479, 0]], [[0.18138, 0.65448, 0], [0.94537, 0.9038, 0], [0.54793, 0.65448, 0]], [[0.59647, 0.52283, 0], [0.14787, 0.95747, 0], [0.14312, 0.21265, 0]]]);
});
test('random 21', t => {
  const a = [[0.82317, 0.28425, 0.23901], [0.13415, 0.88885, 0.74541], [0.44416, 0.7216, 0.40015]];
  const b = [[0.43772, 0.20238, 0.69053], [0.35947, 0.79959, 0.78976], [0.04874, 0.58473, 0.46507]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.32475, 0.7216, 0], [0.44416, 0.7216, 0], [0.82317, 0.28425, 0]], [[0.35947, 0.79959, 0], [0.04874, 0.58473, 0], [0.43772, 0.20238, 0]], [[0.32475, 0.7216, 0], [0.13415, 0.88885, 0], [0.44416, 0.7216, 0]]]);
});
test('random 22', t => {
  const a = [[0.82831, 0.08466, 0.84992], [0.94961, 0.5526, 0.72931], [0.20221, 0.6989, 0.75079]];
  const b = [[0.52569, 0.31997, 0.44722], [0.69301, 0.27377, 0.9438], [0.4622, 0.79378, 0.08487]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.94961, 0.5526, 0], [0.20221, 0.6989, 0], [0.82831, 0.08466, 0]], [[0.4622, 0.79378, 0], [0.52569, 0.31997, 0], [0.69301, 0.27377, 0]]]);
});
test('random 23', t => {
  const a = [[0.83705, 0.79788, 0.66864], [0.61659, 0.5783, 0.4064], [0.9339, 0.39075, 0.13973]];
  const b = [[0.63365, 0.48192, 0.38338], [0.15138, 0.68514, 0.08002], [0.85773, 0.71803, 0.81598]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.15138, 0.68514, 0], [0.82652, 0.68514, 0], [0.63365, 0.48192, 0]], [[0.15138, 0.68514, 0], [0.85773, 0.71803, 0], [0.82652, 0.68514, 0]], [[0.83705, 0.79788, 0], [0.61659, 0.5783, 0], [0.9339, 0.39075, 0]]]);
});
test('random 24', t => {
  const a = [[0.70171, 0.69295, 0.60185], [0.55695, 0.15139, 0.65252], [0.61156, 0.03891, 0.97656]];
  const b = [[0.83297, 0.377, 0.66344], [0.66345, 0.21067, 0.28503], [0.27678, 0.26205, 0.45667]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.27678, 0.26205, 0], [0.71582, 0.26205, 0], [0.66345, 0.21067, 0]], [[0.27678, 0.26205, 0], [0.83297, 0.377, 0], [0.71582, 0.26205, 0]], [[0.70171, 0.69295, 0], [0.55695, 0.15139, 0], [0.61156, 0.03891, 0]]]);
});
test('random 25', t => {
  const a = [[0.23278, 0.42578, 0.73609], [0.4474, 0.11882, 0.60872], [0.38637, 0.2708, 0.97886]];
  const b = [[0.35765, 0.38495, 0.47679], [0.76009, 0.81238, 0.02738], [0.49787, 0.71922, 0.38228]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.38637, 0.2708, 0], [0.23278, 0.42578, 0], [0.4474, 0.11882, 0]], [[0.76009, 0.81238, 0], [0.49787, 0.71922, 0], [0.35765, 0.38495, 0]]]);
});
test('random 26', t => {
  const a = [[0.52088, 0.29377, 0.8107], [0.56041, 0.19617, 0.01082], [0.11916, 0.88916, 0.83138]];
  const b = [[0.87195, 0.59496, 0.96966], [0.35597, 0.06933, 0.35386], [0.25292, 0.39784, 0.13503]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.49826, 0.29377, 0], [0.52088, 0.29377, 0], [0.56041, 0.19617, 0]], [[0.25292, 0.39784, 0], [0.67845, 0.39784, 0], [0.35597, 0.06933, 0]], [[0.25292, 0.39784, 0], [0.87195, 0.59496, 0], [0.67845, 0.39784, 0]], [[0.49826, 0.29377, 0], [0.11916, 0.88916, 0], [0.52088, 0.29377, 0]]]);
});
test('random 27', t => {
  const a = [[0.01669, 0.01274, 0.57947], [0.7413, 0.40668, 0.39862], [0.83143, 0.4378, 0.38492]];
  const b = [[0.29122, 0.19614, 0.77439], [0.49515, 0.93666, 0.19269], [0.9084, 0.79541, 0.30094]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.7413, 0.40668, 0], [0.77178, 0.40668, 0], [0.01669, 0.01274, 0]], [[0.7413, 0.40668, 0], [0.83143, 0.4378, 0], [0.77178, 0.40668, 0]], [[0.45625, 0.79541, 0], [0.9084, 0.79541, 0], [0.29122, 0.19614, 0]], [[0.45625, 0.79541, 0], [0.49515, 0.93666, 0], [0.9084, 0.79541, 0]]]);
});
test('random 28', t => {
  const a = [[0.05275, 0.52182, 0.24464], [0.18539, 0.12821, 0.91364], [0.03634, 0.39688, 0.31143]];
  const b = [[0.05222, 0.44087, 0.54257], [0.09116, 0.28624, 0.50119], [0.50819, 0.7959, 0.40447]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.03634, 0.39688, 0], [0.09485, 0.39688, 0], [0.18539, 0.12821, 0]], [[0.03634, 0.39688, 0], [0.05275, 0.52182, 0], [0.09485, 0.39688, 0]], [[0.50819, 0.7959, 0], [0.05222, 0.44087, 0], [0.09116, 0.28624, 0]]]);
});
test('random 29', t => {
  const a = [[0.07793, 0.789, 0.46351], [0.96645, 0.57848, 0.31353], [0.72854, 0.92992, 0.4027]];
  const b = [[0.91471, 0.77426, 0.03588], [0.83444, 0.85114, 0.02516], [0.79224, 0.00808, 0.18938]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.91471, 0.77426, 0], [0.83444, 0.85114, 0], [0.79224, 0.00808, 0]], [[0.72854, 0.92992, 0], [0.07793, 0.789, 0], [0.96645, 0.57848, 0]]]);
});
test('random 30', t => {
  const a = [[0.97405, 0.18241, 0.4408], [0.807, 0.61506, 0.07631], [0.53889, 0.11534, 0.90467]];
  const b = [[0.24942, 0.8897, 0.3012], [0.25868, 0.722, 0.07432], [0.80302, 0.71227, 0.90228]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.97405, 0.18241, 0], [0.807, 0.61506, 0], [0.53889, 0.11534, 0]], [[0.24942, 0.8897, 0], [0.25868, 0.722, 0], [0.80302, 0.71227, 0]]]);
});
test('random 31', t => {
  const a = [[0.67934, 0.94914, 0.15615], [0.58431, 0.11244, 0.54155], [0.94538, 0.76819, 0.98345]];
  const b = [[0.03492, 0.15175, 0.77833], [0.98228, 0.69837, 0.37474], [0.51391, 0.80398, 0.91871]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.98228, 0.69837, 0], [0.51391, 0.80398, 0], [0.03492, 0.15175, 0]], [[0.94538, 0.76819, 0], [0.67934, 0.94914, 0], [0.58431, 0.11244, 0]]]);
});
test('random 32', t => {
  const a = [[0.4312, 0.2614, 0.4975], [0.79285, 0.20354, 0.56803], [0.0324, 0.82858, 0.34857]];
  const b = [[0.51094, 0.6865, 0.40751], [0.95112, 0.67394, 0.14476], [0.93917, 0.99899, 0.32873]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.0324, 0.82858, 0], [0.4312, 0.2614, 0], [0.79285, 0.20354, 0]], [[0.93917, 0.99899, 0], [0.51094, 0.6865, 0], [0.95112, 0.67394, 0]]]);
});
test('random 33', t => {
  const a = [[0.99284, 0.81025, 0.31894], [0.75309, 0.03449, 0.12399], [0.17015, 0.95653, 0.12811]];
  const b = [[0.55604, 0.9204, 0.97801], [0.76449, 0.68778, 0.8553], [0.9749, 0.66671, 0.79365]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.26263, 0.81025, 0], [0.99284, 0.81025, 0], [0.75309, 0.03449, 0]], [[0.55604, 0.9204, 0], [0.76449, 0.68778, 0], [0.9749, 0.66671, 0]], [[0.26263, 0.81025, 0], [0.17015, 0.95653, 0], [0.99284, 0.81025, 0]]]);
});
test('random 34', t => {
  const a = [[0.15423, 0.50604, 0.14006], [0.88569, 0.53948, 0.66858], [0.87174, 0.70447, 0.22478]];
  const b = [[0.68971, 0.73544, 0.65152], [0.07029, 0.3052, 0.13452], [0.22421, 0.47552, 0.29276]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.22421, 0.47552, 0], [0.3155, 0.47552, 0], [0.07029, 0.3052, 0]], [[0.88569, 0.53948, 0], [0.87174, 0.70447, 0], [0.15423, 0.50604, 0]], [[0.22421, 0.47552, 0], [0.68971, 0.73544, 0], [0.3155, 0.47552, 0]]]);
});
test('random 35', t => {
  const a = [[0.69866, 0.54609, 0.65217], [0.70623, 0.98539, 0.32247], [0.72566, 0.99653, 0.64779]];
  const b = [[0.41052, 0.71677, 0.98121], [0.37785, 0.43686, 0.21594], [0.93331, 0.68206, 0.61067]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.93331, 0.68206, 0], [0.41052, 0.71677, 0], [0.37785, 0.43686, 0]], [[0.70623, 0.98539, 0], [0.72499, 0.98539, 0], [0.69866, 0.54609, 0]], [[0.70623, 0.98539, 0], [0.72566, 0.99653, 0], [0.72499, 0.98539, 0]]]);
});
test('random 36', t => {
  const a = [[0.96864, 0.74279, 0.67643], [0.39421, 0.77663, 0.90507], [0.16236, 0.96938, 0.16506]];
  const b = [[0.71513, 0.30188, 0.83254], [0.32104, 0.44789, 0.02572], [0.69078, 0.30209, 0.20544]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.32104, 0.44789, 0], [0.69078, 0.30209, 0], [0.71513, 0.30188, 0]], [[0.39421, 0.77663, 0], [0.84823, 0.77663, 0], [0.96864, 0.74279, 0]], [[0.39421, 0.77663, 0], [0.16236, 0.96938, 0], [0.84823, 0.77663, 0]]]);
});
test('random 37', t => {
  const a = [[0.00874, 0.3592, 0.38039], [0.96777, 0.0041, 0.94924], [0.48676, 0.44129, 0.82796]];
  const b = [[0.70954, 0.55843, 0.33235], [0.10949, 0.51058, 0.4306], [0.5516, 0.87586, 0.60547]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.48676, 0.44129, 0], [0.00874, 0.3592, 0], [0.96777, 0.0041, 0]], [[0.1674, 0.55843, 0], [0.70954, 0.55843, 0], [0.10949, 0.51058, 0]], [[0.1674, 0.55843, 0], [0.5516, 0.87586, 0], [0.70954, 0.55843, 0]]]);
});
test('random 38', t => {
  const a = [[0.27591, 0.7691, 0.6301], [0.47936, 0.53045, 0.37935], [0.33183, 0.79758, 0.89199]];
  const b = [[0.51433, 0.55672, 0.45599], [0.854, 0.15718, 0.77555], [0.98222, 0.8244, 0.57474]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.33183, 0.79758, 0], [0.27591, 0.7691, 0], [0.47936, 0.53045, 0]], [[0.98222, 0.8244, 0], [0.51433, 0.55672, 0], [0.854, 0.15718, 0]]]);
});
test('random 39', t => {
  const a = [[0.72221, 0.29776, 0.21689], [0.90203, 0.40765, 0.48637], [0.86151, 0.35942, 0.87217]];
  const b = [[0.67025, 0.14213, 0.02722], [0.68822, 0.0242, 0.83415], [0.28262, 0.74605, 0.13315]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.62196, 0.14213, 0], [0.67025, 0.14213, 0], [0.68822, 0.0242, 0]], [[0.82311, 0.35942, 0], [0.86151, 0.35942, 0], [0.72221, 0.29776, 0]], [[0.82311, 0.35942, 0], [0.90203, 0.40765, 0], [0.86151, 0.35942, 0]], [[0.62196, 0.14213, 0], [0.28262, 0.74605, 0], [0.67025, 0.14213, 0]]]);
});
test('random 40', t => {
  const a = [[0.35318, 0.35469, 0.53059], [0.87108, 0.8484, 0.95829], [0.66435, 0.0691, 0.48477]];
  const b = [[0.03801, 0.54068, 0.3052], [0.00218, 0.01678, 0.59135], [0.23231, 0.50707, 0.67252]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.35318, 0.35469, 0], [0.74011, 0.35469, 0], [0.66435, 0.0691, 0]], [[0.23231, 0.50707, 0], [0.03801, 0.54068, 0], [0.00218, 0.01678, 0]], [[0.35318, 0.35469, 0], [0.87108, 0.8484, 0], [0.74011, 0.35469, 0]]]);
});
test('random 41', t => {
  const a = [[0.90397, 0.76495, 0.40808], [0.58898, 0.65595, 0.68743], [0.94248, 0.00607, 0.27013]];
  const b = [[0.89068, 0.92235, 0.08595], [0.80389, 0.7398, 0.29686], [0.04831, 0.02295, 0.77365]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.71971, 0.7398, 0], [0.80389, 0.7398, 0], [0.04831, 0.02295, 0]], [[0.90397, 0.76495, 0], [0.58898, 0.65595, 0], [0.94248, 0.00607, 0]], [[0.71971, 0.7398, 0], [0.89068, 0.92235, 0], [0.80389, 0.7398, 0]]]);
});
test('random 42', t => {
  const a = [[0.0644, 0.84181, 0.66228], [0.7349, 0.73494, 0.30818], [0.85063, 0.43113, 0.13754]];
  const b = [[0.71659, 0.17924, 0.61927], [0.26318, 0.9215, 0.45995], [0.91538, 0.69607, 0.12189]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.40088, 0.69607, 0], [0.91538, 0.69607, 0], [0.71659, 0.17924, 0]], [[0.269, 0.73494, 0], [0.7349, 0.73494, 0], [0.85063, 0.43113, 0]], [[0.269, 0.73494, 0], [0.0644, 0.84181, 0], [0.7349, 0.73494, 0]], [[0.40088, 0.69607, 0], [0.26318, 0.9215, 0], [0.91538, 0.69607, 0]]]);
});
test('random 43', t => {
  const a = [[0.65995, 0.73796, 0.16715], [0.08323, 0.92478, 0.7314], [0.44782, 0.65921, 0.18031]];
  const b = [[0.00098, 0.54289, 0.32418], [0.0206, 0.54513, 0.30985], [0.14068, 0.17101, 0.51459]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.00098, 0.54289, 0], [0.02132, 0.54289, 0], [0.14068, 0.17101, 0]], [[0.00098, 0.54289, 0], [0.0206, 0.54513, 0], [0.02132, 0.54289, 0]], [[0.65995, 0.73796, 0], [0.08323, 0.92478, 0], [0.44782, 0.65921, 0]]]);
});
test('random 44', t => {
  const a = [[0.50967, 0.25716, 0.17864], [0.2911, 0.56562, 0.14461], [0.34569, 0.13041, 0.84032]];
  const b = [[0.78881, 0.89791, 0.38249], [0.54848, 0.90616, 0.70854], [0.69936, 0.85984, 0.96769]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.50967, 0.25716, 0], [0.2911, 0.56562, 0], [0.34569, 0.13041, 0]], [[0.78881, 0.89791, 0], [0.54848, 0.90616, 0], [0.69936, 0.85984, 0]]]);
});
test('random 45', t => {
  const a = [[0.11916, 0.56564, 0.28605], [0.06196, 0.01488, 0.75446], [0.36099, 0.85228, 0.48538]];
  const b = [[0.60997, 0.71802, 0.23772], [0.64832, 0.75994, 0.37571], [0.43308, 0.16276, 0.97409]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.60997, 0.71802, 0], [0.63321, 0.71802, 0], [0.43308, 0.16276, 0]], [[0.60997, 0.71802, 0], [0.64832, 0.75994, 0], [0.63321, 0.71802, 0]], [[0.36099, 0.85228, 0], [0.11916, 0.56564, 0], [0.06196, 0.01488, 0]]]);
});
test('random 46', t => {
  const a = [[0.94993, 0.91636, 0.65332], [0.57701, 0.35549, 0.76331], [0.18594, 0.59644, 0.8214]];
  const b = [[0.83175, 0.32409, 0.61137], [0.67219, 0.83485, 0.00296], [0.31103, 0.59136, 0.454]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.18594, 0.59644, 0], [0.73722, 0.59644, 0], [0.57701, 0.35549, 0]], [[0.67219, 0.83485, 0], [0.31103, 0.59136, 0], [0.83175, 0.32409, 0]], [[0.18594, 0.59644, 0], [0.94993, 0.91636, 0], [0.73722, 0.59644, 0]]]);
});
test('random 47', t => {
  const a = [[0.27507, 0.79078, 0.37612], [0.76198, 0.43769, 0.98209], [0.132, 0.71915, 0.44926]];
  const b = [[0.78492, 0.71866, 0.52682], [0.08017, 0.8669, 0.99641], [0.31548, 0.6453, 0.44999]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.132, 0.71915, 0], [0.37385, 0.71915, 0], [0.76198, 0.43769, 0]], [[0.132, 0.71915, 0], [0.27507, 0.79078, 0], [0.37385, 0.71915, 0]], [[0.78492, 0.71866, 0], [0.08017, 0.8669, 0], [0.31548, 0.6453, 0]]]);
});
test('random 48', t => {
  const a = [[0.34013, 0.63493, 0.79847], [0.15439, 0.4241, 0.8701], [0.45312, 0.17828, 0.11909]];
  const b = [[0.77227, 0.14921, 0.9472], [0.29904, 0.62895, 0.33612], [0.62085, 0.71969, 0.54192]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.29904, 0.62895, 0], [0.64493, 0.62895, 0], [0.77227, 0.14921, 0]], [[0.34013, 0.63493, 0], [0.15439, 0.4241, 0], [0.45312, 0.17828, 0]], [[0.29904, 0.62895, 0], [0.62085, 0.71969, 0], [0.64493, 0.62895, 0]]]);
});
test('random 49', t => {
  const a = [[0.51987, 0.42904, 0.30898], [0.69104, 0.17719, 0.64021], [0.62515, 0.92339, 0.68806]];
  const b = [[0.97106, 0.5423, 0.06856], [0.61584, 0.88162, 0.24563], [0.6545, 0.43386, 0.14887]];
  const r = canonicalize(retessellate([a, b]));
  t.deepEqual(r, [[[0.97106, 0.5423, 0], [0.61584, 0.88162, 0], [0.6545, 0.43386, 0]], [[0.62515, 0.92339, 0], [0.51987, 0.42904, 0], [0.69104, 0.17719, 0]]]);
});

/*
const generateRandomTests = () => {
  const randomPoint = () => [Math.random(), Math.random(), Math.random()];

  for (let i = 3; i < 50; i++) {
    const a = canonicalize([[randomPoint(), randomPoint(), randomPoint()]])[0];
    const b = canonicalize([[randomPoint(), randomPoint(), randomPoint()]])[0];
    const r = canonicalize(retessellate([a, b]));
    console.log(`test('random ${i}', t => {`);
    console.log(`  const a = ${JSON.stringify(a)};`);
    console.log(`  const b = ${JSON.stringify(b)};`);
    console.log(`  const r = canonicalize(retessellate([a, b]));`);
    console.log(`  t.deepEqual(r, ${JSON.stringify(r)});`);
    console.log(`});`);
  }
};
*/
